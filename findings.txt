# Cross Compiling libdrm for freedreno
export PATH=/home/linuxdev/Development/GoPro/Popoyo/POPOYO_EDB/banzai_mnz/precompiled/sysroots/x86_64-linux/usr/bin/arm-oemllib32-linux-gnueabi:$PATH
./configure --disable-radeon --disable-amdgpu --disable-nouveau --disable-vmwgfx  --enable-freedreno-kgsl --host=arm-oemllib32-linux-gnueabi CFLAGS="-g --sysroot=/home/linuxdev/Development/GoPro/Popoyo/POPOYO_EDB/banzai_mnz/precompiled/sysroots/lib32-apq8053" CXXFLAGS="-g --sysroot=/home/linuxdev/Development/GoPro/Popoyo/POPOYO_EDB/banzai_mnz/precompiled/sysroots/lib32-apq8053"

# Cross compiling Mesa
export PATH=/home/linuxdev/Development/GoPro/Popoyo/POPOYO_EDB/banzai_mnz/precompiled/sysroots/x86_64-linux/usr/bin/arm-oemllib32-linux-gnueabi:$PATH
./configure --disable-valgrind --with-gallium-drivers="freedreno" --with-dri-drivers="swrast" --with-egl-platforms=drm --host=arm-oemllib32-linux-gnueabi --target=arm-oemllib32-linux-gnueabi --enable-gallium-llvm CFLAGS="-g --sysroot=/home/linuxdev/Development/GoPro/Popoyo/POPOYO_EDB/banzai_mnz/precompiled/sysroots/lib32-apq8053" CXXFLAGS="-g --sysroot=/home/linuxdev/Development/GoPro/Popoyo/POPOYO_EDB/banzai_mnz/precompiled/sysroots/lib32-apq8053" LDFLAGS="-L/home/linuxdev/Development/Mesa/QtProjects/AndroMesa/libdrm/freedreno/.libs" FREEDRENO_LIBS="/home/linuxdev/Development/Mesa/QtProjects/AndroMesa/libdrm/freedreno/.libs" FREEDRENO_CFLAGS="/home/linuxdev/Development/Mesa/QtProjects/AndroMesa/libdrm/freedreno" LIBDRM_CFLAGS="-I/home/linuxdev/Development/Mesa/QtProjects/AndroMesa/libdrm -I/home/linuxdev/Development/Mesa/QtProjects/AndroMesa/libdrm/include/drm" LIBDRM_LIBS="-L/home/linuxdev/Development/Mesa/QtProjects/AndroMesa/libdrm/.libs"
LIBS="-ldrm_freedreno
LIBS="/home/linuxdev/Development/GoPro/Popoyo/POPOYO_EDB/banzai_mnz/precompiled/sysroots/lib32-apq8053/usr/lib/crti.o /home/linuxdev/Development/GoPro/Popoyo/POPOYO_EDB/banzai_mnz/precompiled/sysroots/lib32-apq8053/usr/lib/crtn.o"


# Every dri driver has to implement
struct __DriverAPIRec {
    const __DRIconfig **(*InitScreen) (__DRIscreen * priv);

    void (*DestroyScreen)(__DRIscreen *driScrnPriv);

    GLboolean (*CreateContext)(gl_api api,
                               const struct gl_config *glVis,
                               __DRIcontext *driContextPriv,
			       unsigned major_version,
			       unsigned minor_version,
			       uint32_t flags,
                               bool notify_reset,
			       unsigned *error,
                               void *sharedContextPrivate);

    void (*DestroyContext)(__DRIcontext *driContextPriv);

    GLboolean (*CreateBuffer)(__DRIscreen *driScrnPriv,
                              __DRIdrawable *driDrawPriv,
                              const struct gl_config *glVis,
                              GLboolean pixmapBuffer);

    void (*DestroyBuffer)(__DRIdrawable *driDrawPriv);

    void (*SwapBuffers)(__DRIdrawable *driDrawPriv);

    GLboolean (*MakeCurrent)(__DRIcontext *driContextPriv,
                             __DRIdrawable *driDrawPriv,
                             __DRIdrawable *driReadPriv);

    GLboolean (*UnbindContext)(__DRIcontext *driContextPriv);

    __DRIbuffer *(*AllocateBuffer) (__DRIscreen *screenPrivate,
                                    unsigned int attachment,
                                    unsigned int format,
                                    int width, int height);

    void (*ReleaseBuffer) (__DRIscreen *screenPrivate, __DRIbuffer *buffer);

    void (*CopySubBuffer)(__DRIdrawable *driDrawPriv, int x, int y,
                          int w, int h);
};

driCreateNewScreen2() keeps this pointer in psp->driver and uses it to create screen


